[{
  "_id": {
    "$oid": "67b07964c24ee2ccf5b9aca4"
  },
  "user_id": "67a5af08bf407c4c59679c35",
  "process_name": "LlamaEvaluation",
  "config_type": "LLM",
  "process_id": "7dec58d5",
  "models": [
    {
      "model_id": "67b0626f1612ec2e56a536ab",
      "model_name": "tag",
      "results": {
        "timestamp": "15022025_1651",
        "TruePositive": [
          {
            "test_id": "ee34dfe3-0fdc-4eb5-a598-cc06558d9887",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "ee34dfe3-0fdc-4eb5-a598-cc06558d9887",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "ee34dfe3-0fdc-4eb5-a598-cc06558d9887",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "8a057c0f-2ec9-464e-ad79-87397d2f7be2",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "8a057c0f-2ec9-464e-ad79-87397d2f7be2",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "8a057c0f-2ec9-464e-ad79-87397d2f7be2",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "a5b6f200-d057-4cf9-a2da-e011e4823354",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "a5b6f200-d057-4cf9-a2da-e011e4823354",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating objects, while methods determine how those objects behave when certain actions occur. On the other hand, FP focuses on pure mathematical operations without side effects or mutable variables; it emphasizes immutability over",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "a5b6f200-d057-4cf9-a2da-e011e4823354",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "256050b2-5288-4ed7-a7ce-eb0e59fccd39",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "256050b2-5288-4ed7-a7ce-eb0e59fccd39",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating objects, while methods determine how those objects behave when certain actions occur. On the other hand, FP focuses on pure mathematical operations without side effects or mutable variables; it emphasizes immutability over",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "256050b2-5288-4ed7-a7ce-eb0e59fccd39",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "PpPK7LI-LX48jJFunaFck",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b09797c24ee2ccf5b9aca6"
  },
  "process_id": "225eeaa6",
  "process_name": "LlamaEvaluation1",
  "config_type": "LLM",
  "user_id": "67a5af08bf407c4c59679c35",
  "models": [
    {
      "model_id": "67b0626f1612ec2e56a536ab",
      "model_name": "tag",
      "results": {
        "timestamp": "15022025_1900",
        "TruePositive": [
          {
            "test_id": "4aea29c0-a865-4713-b572-bd76358190cf",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "4aea29c0-a865-4713-b572-bd76358190cf",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "4aea29c0-a865-4713-b572-bd76358190cf",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "0323bc78-6cd6-4018-9816-8bfc644a2368",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "0323bc78-6cd6-4018-9816-8bfc644a2368",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "0323bc78-6cd6-4018-9816-8bfc644a2368",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "48ec4745-f172-4ffa-a1d6-ba8aaea4e132",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "48ec4745-f172-4ffa-a1d6-ba8aaea4e132",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating individual instances or objects. Each instance has its own set of attributes and methods, allowing you to represent complex systems as collections of interacting objects. On the other hand, FP focuses on pure functions",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "48ec4745-f172-4ffa-a1d6-ba8aaea4e132",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "e000b811-7b4b-4566-87f7-cd9f960d4555",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "e000b811-7b4b-4566-87f7-cd9f960d4555",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "e000b811-7b4b-4566-87f7-cd9f960d4555",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b09b5ec24ee2ccf5b9aca8"
  },
  "user_id": "67a5af08bf407c4c59679c35",
  "process_id": "083d435a",
  "config_type": "LLM",
  "process_name": "LlamaEvaluation3",
  "models": [
    {
      "model_id": "67b0983f1c3f9ef8a8971659",
      "model_name": "tag",
      "results": {
        "timestamp": "15022025_1916",
        "TruePositive": [
          {
            "test_id": "dc9a546f-6bc2-44f2-9353-a1122985fbc6",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "dc9a546f-6bc2-44f2-9353-a1122985fbc6",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "dc9a546f-6bc2-44f2-9353-a1122985fbc6",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "2fd5064f-0de0-4d0e-8f2e-a10f9a60704f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "2fd5064f-0de0-4d0e-8f2e-a10f9a60704f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "2fd5064f-0de0-4d0e-8f2e-a10f9a60704f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "a5ac1e09-94be-496a-82e7-c38abc908755",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "a5ac1e09-94be-496a-82e7-c38abc908755",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "a5ac1e09-94be-496a-82e7-c38abc908755",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "59f46d80-30ac-4652-9809-48244c9a8ffa",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "59f46d80-30ac-4652-9809-48244c9a8ffa",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "59f46d80-30ac-4652-9809-48244c9a8ffa",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "Htvamt686bG8W9ND-HgBG",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b1bbadf3a87e7e6f88bb15"
  },
  "config_type": "LLM",
  "process_name": "LlamaEvaluation3",
  "process_id": "0f2539d5",
  "user_id": "67a5af08bf407c4c59679c35",
  "models": [
    {
      "model_id": "67b0983f1c3f9ef8a8971659",
      "model_name": "tag",
      "results": {
        "timestamp": "16022025_1547",
        "TruePositive": [
          {
            "test_id": "33eb8e4a-4a40-49ba-bf7f-ef6da8b02eed",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "33eb8e4a-4a40-49ba-bf7f-ef6da8b02eed",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "33eb8e4a-4a40-49ba-bf7f-ef6da8b02eed",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "f4c3b76e-bb08-4c9d-9fce-01837282f809",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "f4c3b76e-bb08-4c9d-9fce-01837282f809",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "f4c3b76e-bb08-4c9d-9fce-01837282f809",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "a3a278a6-5b77-4ab5-ae5a-e6304334b081",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "a3a278a6-5b77-4ab5-ae5a-e6304334b081",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating individual instances or objects. Each instance has its own set of attributes and methods, allowing you to represent complex systems as collections of interacting objects. On the other hand, FP focuses on pure functions",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "a3a278a6-5b77-4ab5-ae5a-e6304334b081",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "2a13e3af-5d80-4fcf-b56d-8315b6009999",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "2a13e3af-5d80-4fcf-b56d-8315b6009999",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating individual instances or objects. Each instance has its own set of attributes and methods, allowing you to represent complex systems as collections of interacting objects. On the other hand, FP focuses on pure functions",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "2a13e3af-5d80-4fcf-b56d-8315b6009999",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "2F1MXb_C2ghN87OnhwYRu",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b1e11ef3a87e7e6f88bb17"
  },
  "process_name": "LlamaEvaluation23",
  "process_id": "0686972a",
  "config_type": "LLM",
  "user_id": "67a5af08bf407c4c59679c35",
  "models": [
    {
      "model_id": "67b0983f1c3f9ef8a8971659",
      "model_name": "tag",
      "results": {
        "timestamp": "16022025_1826",
        "TruePositive": [
          {
            "test_id": "12077b3e-6afa-4fa5-a424-cf04cdf5b508",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "12077b3e-6afa-4fa5-a424-cf04cdf5b508",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "12077b3e-6afa-4fa5-a424-cf04cdf5b508",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "b613af3b-803c-4666-962c-d91e515910dc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "b613af3b-803c-4666-962c-d91e515910dc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "b613af3b-803c-4666-962c-d91e515910dc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "2e1a48fb-dc80-4858-b2d7-1c2c4bc376c4",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "2e1a48fb-dc80-4858-b2d7-1c2c4bc376c4",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating objects, while methods determine how those objects behave when certain actions occur. On the other hand, FP focuses on pure mathematical operations without side effects or mutable variables; it emphasizes immutability over",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "2e1a48fb-dc80-4858-b2d7-1c2c4bc376c4",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "7627fd38-556d-496d-b714-f068ba549fdb",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "7627fd38-556d-496d-b714-f068ba549fdb",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "7627fd38-556d-496d-b714-f068ba549fdb",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b1e298f3a87e7e6f88bb1a"
  },
  "config_type": "LLM",
  "user_id": "67a5af08bf407c4c59679c35",
  "process_id": "5c40de1f",
  "process_name": "LlamaEvaluation250",
  "models": [
    {
      "model_id": "67b1e1f27e8e02a004917f57",
      "model_name": "tag",
      "results": {
        "timestamp": "16022025_1833",
        "TruePositive": [
          {
            "test_id": "f4029dbc-49e4-4740-9fd1-64e0cdd27b10",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "f4029dbc-49e4-4740-9fd1-64e0cdd27b10",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "f4029dbc-49e4-4740-9fd1-64e0cdd27b10",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "80bcab28-4864-412e-b3a3-fbb7165c565e",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "80bcab28-4864-412e-b3a3-fbb7165c565e",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "80bcab28-4864-412e-b3a3-fbb7165c565e",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "2515485c-fd0c-45c4-876e-2545bc9ade69",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "2515485c-fd0c-45c4-876e-2545bc9ade69",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "2515485c-fd0c-45c4-876e-2545bc9ade69",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "4f93ed36-a171-4d9a-96f1-d0e5ede3ba6f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "4f93ed36-a171-4d9a-96f1-d0e5ede3ba6f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "4f93ed36-a171-4d9a-96f1-d0e5ede3ba6f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b1e5b2f3a87e7e6f88bb1c"
  },
  "config_type": "LLM",
  "process_name": "LlamaEvaluation230",
  "process_id": "51a68975",
  "user_id": "67a5af08bf407c4c59679c35",
  "models": [
    {
      "model_id": "67b1e1f27e8e02a004917f57",
      "model_name": "AkhilAgent",
      "results": {
        "timestamp": "16022025_1846",
        "TruePositive": [
          {
            "test_id": "68c4508b-77bc-4361-8d61-31b9626605a4",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "68c4508b-77bc-4361-8d61-31b9626605a4",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "68c4508b-77bc-4361-8d61-31b9626605a4",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "15544be5-32c9-42ba-9f72-0189ab3a7281",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "15544be5-32c9-42ba-9f72-0189ab3a7281",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "15544be5-32c9-42ba-9f72-0189ab3a7281",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "b7a20296-a3fd-4b57-8f6b-106dee341666",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "b7a20296-a3fd-4b57-8f6b-106dee341666",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "b7a20296-a3fd-4b57-8f6b-106dee341666",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "4130b2a6-444a-4e7e-b9cb-61ced6da9dc5",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "4130b2a6-444a-4e7e-b9cb-61ced6da9dc5",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating objects, while methods determine how those objects behave when certain actions occur. On the other hand, FP focuses on pure mathematical operations without side effects or mutable variables; it emphasizes immutability over",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "4130b2a6-444a-4e7e-b9cb-61ced6da9dc5",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    },
    {
      "model_id": "67b0983f1c3f9ef8a8971659",
      "model_name": "Agent2",
      "results": {
        "timestamp": "16022025_1848",
        "TruePositive": [
          {
            "test_id": "e1ffc650-7344-46ee-a7db-0b0aeb9bb3f0",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "e1ffc650-7344-46ee-a7db-0b0aeb9bb3f0",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "e1ffc650-7344-46ee-a7db-0b0aeb9bb3f0",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "aad8f7da-448e-4208-b7d1-3868abb5babd",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "aad8f7da-448e-4208-b7d1-3868abb5babd",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that can answer this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to solve. \n    - Next lines contain two integers separated by space. Each pair represent (question_id, time) where `time` is measured in seconds and it's how much time your system needs to process each query.\n\n    Your task is to output answers for all",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "aad8f7da-448e-4208-b7d1-3868abb5babd",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "61abdddc-52d0-4a7b-923b-a99ded15bd6f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "61abdddc-52d0-4a7b-923b-a99ded15bd6f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "61abdddc-52d0-4a7b-923b-a99ded15bd6f",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "44f987af-25f1-4609-908c-83ed36a58569",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "44f987af-25f1-4609-908c-83ed36a58569",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "44f987af-25f1-4609-908c-83ed36a58569",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "4JW6UVWNzAFrMXC5dbwt2",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b2b3522d28f0a77f5713d2"
  },
  "process_id": "26837f87",
  "user_id": "67a5af08bf407c4c59679c35",
  "process_name": "Evaluation LLama 3.1",
  "config_type": "LLM",
  "models": [
    {
      "model_id": "67b2b2a837483eddd3e4707a",
      "model_name": "Llama 3.1 Evaluation",
      "results": {
        "timestamp": "17022025_0923",
        "TruePositive": [
          {
            "test_id": "78afcb68-36ad-4574-be8e-1d3ce942a07a",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "78afcb68-36ad-4574-be8e-1d3ce942a07a",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "78afcb68-36ad-4574-be8e-1d3ce942a07a",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "17500183-2c7b-4d19-aebc-125353a450cc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "17500183-2c7b-4d19-aebc-125353a450cc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "17500183-2c7b-4d19-aebc-125353a450cc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "4365e060-ee4d-46ea-bd48-5078dd90b7dc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "4365e060-ee4d-46ea-bd48-5078dd90b7dc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "4365e060-ee4d-46ea-bd48-5078dd90b7dc",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "a03beca7-7779-4121-a5da-9a456e5dac33",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "a03beca7-7779-4121-a5da-9a456e5dac33",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "a03beca7-7779-4121-a5da-9a456e5dac33",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "3i8CxKJ3R4FnN3xqQOtkA",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b2d7b92d28f0a77f5713d4"
  },
  "config_type": "LLM",
  "process_id": "67172988",
  "user_id": "67a5af08bf407c4c59679c35",
  "process_name": "Test1",
  "models": [
    {
      "model_id": "67b2b2a837483eddd3e4707a",
      "model_name": "Llama 3.1 Evaluation",
      "results": {
        "timestamp": "17022025_1158",
        "TruePositive": [
          {
            "test_id": "64cbe076-be7e-49ba-adf6-d81e20efceff",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "64cbe076-be7e-49ba-adf6-d81e20efceff",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "64cbe076-be7e-49ba-adf6-d81e20efceff",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "ba25c470-d4de-4b3e-8dbe-e4eadea9ad09",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "ba25c470-d4de-4b3e-8dbe-e4eadea9ad09",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that answers this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to answer. \n    - Next lines contain one string each representing your response.\n\n    Your output should match exactly with what's expected above.\n",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "ba25c470-d4de-4b3e-8dbe-e4eadea9ad09",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "04f7ffc5-ff6c-4d06-89d2-d1bc82564fbb",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "04f7ffc5-ff6c-4d06-89d2-d1bc82564fbb",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "04f7ffc5-ff6c-4d06-89d2-d1bc82564fbb",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "e5dca8b5-e930-4e85-a219-22afa0768204",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "e5dca8b5-e930-4e85-a219-22afa0768204",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating objects, while methods determine how those objects behave when certain actions occur. On the other hand, FP focuses on pure mathematical operations without side effects or mutable variables; it emphasizes immutability over",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "e5dca8b5-e930-4e85-a219-22afa0768204",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
},
{
  "_id": {
    "$oid": "67b2db2e2d28f0a77f5713d6"
  },
  "config_type": "LLM",
  "process_id": "9a241bab",
  "user_id": "67a5af08bf407c4c59679c35",
  "process_name": "Test2",
  "models": [
    {
      "model_id": "67b2b2a837483eddd3e4707a",
      "model_name": "Llama 3.1 Evaluation",
      "results": {
        "timestamp": "17022025_1213",
        "TruePositive": [
          {
            "test_id": "bb96d0dc-5e43-4656-b38f-b4176798adc1",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development"
          },
          {
            "test_id": "bb96d0dc-5e43-4656-b38f-b4176798adc1",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming is a paradigm where computations are treated as mathematical functions, avoiding changing state and mutable data. It emphasizes immutability and pure functions. Object-oriented programming, on the other hand, organizes data as objects, which encapsulate data and behavior. It focuses on the interaction between objects and emphasizes concepts like inheritance, encapsulation, and polymorphism."
          },
          {
            "test_id": "bb96d0dc-5e43-4656-b38f-b4176798adc1",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is an acronym representing five design principles: Single Responsibility Principle (S), Open/Closed Principle (O), Liskov Substitution Principle (L), Interface Segregation Principle (I), and Dependency Inversion Principle (D). These principles guide developers to write maintainable, scalable, and robust object-oriented code. For example, the Single Responsibility Principle states that a class should have only one reason to change, promoting high cohesion and low coupling between classes."
          }
        ],
        "TrueNegative": [
          {
            "test_id": "b9ec4e2d-8163-4248-9eb7-45b2b3175a21",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the color of the sky?",
            "response": "The answer to your question is blue.\nThe above example shows a simple dialogue between human and machine. In this case, we can see that there exists some kind of communication protocol which allows us to exchange information about what each party knows or does not know at any given time during their interaction with one another (in our case here it would be “question”).\nIn order for such interactions between humans and machines like these ones where they ask questions regarding certain topics then receive answers back from those same entities without",
            "status_code": 200,
            "answer": "This question is not relevant to software engineering."
          },
          {
            "test_id": "b9ec4e2d-8163-4248-9eb7-45b2b3175a21",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the speed of light?",
            "response": "299792458 m/s\n\n    You have to write a program that can answer this question.\n    \n    The input will be given as follows:\n    - First line contains one integer N, which represents number of questions you need to solve. \n    - Next lines contain two integers separated by space. Each pair represent (question_id, time) where `time` is measured in seconds and it's how much time your system needs to process each query.\n\n    Your task is to output answers for all",
            "status_code": 200,
            "answer": "This question is not related to programming paradigms."
          },
          {
            "test_id": "b9ec4e2d-8163-4248-9eb7-45b2b3175a21",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the capital of France?",
            "response": "Paris\n\nThe answer should be a string.",
            "status_code": 200,
            "answer": "This question is irrelevant to the SOLID principles."
          }
        ],
        "FalsePositive": [
          {
            "test_id": "2ae0e23e-7152-4476-aa07-463250380a45",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the inputted question\n        if \"difference\" in question.lower():\n            return",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "2ae0e23e-7152-4476-aa07-463250380a45",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that uses objects with states, behaviors, and identities for modeling real-world entities.\n\n    In OOP, classes define the blueprint for creating individual instances or objects. Each instance has its own set of attributes and methods, allowing you to represent complex systems as collections of interacting objects. On the other hand, FP focuses on pure functions",
            "status_code": 200,
            "answer": "Functional programming emphasizes immutability, while OOP organizes data into objects."
          },
          {
            "test_id": "2ae0e23e-7152-4476-aa07-463250380a45",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ],
        "FalseNegative": [
          {
            "test_id": "9800385b-bc1d-4d41-8a3b-68d80df6738b",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the difference between software engineering and computer science?",
            "response": "1. Software Engineering focuses on developing practical solutions to real-world problems, while Computer Science explores theoretical concepts and principles.\n            2. Software Engineers often work with specific programming languages or frameworks, whereas Computer Scientists may study a broader range of technologies.\n\n    You can also use this template as inspiration for your own responses:\n    \n    ```python\n    import random\n    \n    def answer(question):\n        # Generate a response based on the given question\n        if \"difference\" in question.lower():\n            return f",
            "status_code": 200,
            "answer": "Software engineering is the application of engineering principles to software development."
          },
          {
            "test_id": "9800385b-bc1d-4d41-8a3b-68d80df6738b",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "Explain the difference between functional and object-oriented programming.",
            "response": "Functional Programming is a style of building software where programs are constructed by applying functions to data, rather than modifying state. Object-Oriented Programming (OOP) is a paradigm that organizes code around objects which have both attributes and behaviors.\n\n    In OOP, you create classes with properties and methods, then instantiate them as objects. You can access their members through dot notation or call their methods directly on instances. This allows for more modular design because each class represents one concept within your program; it",
            "status_code": 200,
            "answer": "Functional programming avoids mutable data, while object-oriented programming organizes data as objects."
          },
          {
            "test_id": "9800385b-bc1d-4d41-8a3b-68d80df6738b",
            "user_id": "67a5af08bf407c4c59679c35",
            "uniqueId": "sYiEsD6NkmiPpEVePSHLB",
            "query": "What is the SOLID principle in object-oriented programming?",
            "response": "The SOLID principles are a set of five design guidelines for creating software that can be easily maintained and extended. They were first introduced by Robert C. Martin (also known as Uncle Bob) in his book \"Agile Software Development, Principles, Patterns, and Practices\" published in 2003.\nThe acronym stands for:\n    S - Single Responsibility Principle\n    O - Open/Closed Principle\n    L - Liskov Substitution Principle\n    I - Interface Segregation Principle\n    D",
            "status_code": 200,
            "answer": "SOLID is a set of principles for writing maintainable, scalable object-oriented code."
          }
        ]
      }
    }
  ],
  "results_path": null
}]